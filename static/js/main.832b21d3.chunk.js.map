{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","state","history","Array","fill","location","xIsNext","stepNumber","slice","length","calculateWinner","setState","concat","step","number","row","column","Math","floor","status","current","winner","moves","map","stepFigure","moveNumber","desc","cloumnRow","key","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"iPAIA,SAASA,EAAOC,GACZ,OACI,4BAAQC,UAAU,SAASC,QAASF,EAAME,SACrCF,EAAMG,O,IAKbC,E,2KACWC,GAAI,IAAD,OACZ,OACI,kBAACN,EAAD,CACII,MAAOG,KAAKN,MAAMO,QAAQF,GAC1BH,QAAS,kBAAM,EAAKF,MAAME,QAAQG,Q,+BAM1C,OACI,6BACI,yBAAKJ,UAAU,aACVK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAEvB,yBAAKP,UAAU,aACVK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAEvB,yBAAKP,UAAU,aACVK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,S,GA1BnBC,IAAMC,WAiCpBC,E,kDACF,WAAYX,GAAQ,IAAD,8BACf,cAAMA,IACDY,MAAQ,CACTC,QAAS,CAAC,CAAEN,QAASO,MAAM,GAAGC,KAAK,MAAOC,SAAU,IACpDC,SAAS,EACTC,WAAY,GALD,E,wDAUPb,GACR,IAAMQ,EAAUP,KAAKM,MAAMC,QAAQM,MAAM,EAAGb,KAAKM,MAAMM,WAAa,GAE9DX,EADUM,EAAQA,EAAQO,OAAS,GACjBb,QAAQY,QAC5BE,EAAgBd,IAAYA,EAAQF,KAGxCE,EAAQF,GAAKC,KAAKM,MAAMK,QAAU,IAAM,IACxCX,KAAKgB,SAAS,CACVT,QAASA,EAAQU,OAAO,CAAC,CACrBhB,QAASA,EACTS,SAAUX,KAEda,WAAYL,EAAQO,OACpBH,SAAUX,KAAKM,MAAMK,a,6BAItBO,GACHlB,KAAKgB,SAAS,CACVJ,WAAYM,EACZP,QAAUO,EAAO,IAAO,M,gCAGtBC,GACN,IAAMC,EAAOD,EAAS,EAAK,EACrBE,EAASC,KAAKC,MAAMJ,EAAS,GAAK,EACxC,MAAM,OAAN,OAAcE,EAAd,oBAAgCD,K,+BAG1B,IAaFI,EAbC,OACCjB,EAAUP,KAAKM,MAAMC,QACrBkB,EAAUlB,EAAQP,KAAKM,MAAMM,YAC7Bc,EAASX,EAAgBU,EAAQxB,SACjC0B,EAAQpB,EAAQqB,KAAI,SAACC,EAAYC,GACnC,IAAMC,EAAOD,EAAU,sBAAkBA,EAAlB,cAAkC,EAAKE,UAAUzB,EAAQuB,GAAYpB,WAAc,oBAC1G,OACI,wBAAIuB,IAAKH,GACL,4BAAQlC,QAAS,kBAAM,EAAKsC,OAAOJ,KAAcC,OAY7D,OALIP,EADAE,EACS,WAAaA,EAEb,iBAAmB1B,KAAKM,MAAMK,QAAU,IAAM,KAIvD,yBAAKhB,UAAU,QACX,yBAAKA,UAAU,cACX,kBAACG,EAAD,CACIG,QAASwB,EAAQxB,QACjBL,QAAS,SAACG,GAAD,OAAO,EAAKoC,YAAYpC,OAGzC,yBAAKJ,UAAU,aACX,6BAAM6B,GACN,4BAAKG,S,GAvENxB,IAAMC,WA8EzB,SAASW,EAAgBd,GAWrB,IAVA,IAAMmC,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEFrC,EAAI,EAAGA,EAAIqC,EAAMtB,OAAQf,IAAK,CAAC,IAAD,cACjBqC,EAAMrC,GADW,GAC5BsC,EAD4B,KACzBC,EADyB,KACtBC,EADsB,KAEnC,GAAItC,EAAQoC,IAAMpC,EAAQoC,KAAOpC,EAAQqC,IAAMrC,EAAQoC,KAAOpC,EAAQsC,GAClE,OAAOtC,EAAQoC,GAGvB,OAAO,KAGXG,IAASC,OACL,kBAACpC,EAAD,MACAqC,SAASC,eAAe,W","file":"static/js/main.832b21d3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\n\r\nfunction Square(props) {\r\n    return (\r\n        <button className=\"square\" onClick={props.onClick}>\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\nclass Board extends React.Component {\r\n    renderSquare(i) {\r\n        return (\r\n            <Square\r\n                value={this.props.squares[i]}\r\n                onClick={() => this.props.onClick(i)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(0)}\r\n                    {this.renderSquare(1)}\r\n                    {this.renderSquare(2)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(3)}\r\n                    {this.renderSquare(4)}\r\n                    {this.renderSquare(5)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(6)}\r\n                    {this.renderSquare(7)}\r\n                    {this.renderSquare(8)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [{ squares: Array(9).fill(null), location: 0, }],\r\n            xIsNext: true,\r\n            stepNumber: 0,\r\n\r\n        };\r\n    }\r\n\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n        if (calculateWinner(squares) || squares[i]) {\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n        this.setState({\r\n            history: history.concat([{\r\n                squares: squares,\r\n                location: i,\r\n            }]),\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext,\r\n        });\r\n    }\r\n\r\n    jumpTo(step) {\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0,\r\n        })\r\n    }\r\n    cloumnRow(number) {\r\n        const row = (number % 3) + 1;\r\n        const column = Math.floor(number / 3) + 1;\r\n        return `row:${column}, column:${row}`;\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares);\r\n        const moves = history.map((stepFigure, moveNumber) => {\r\n            const desc = moveNumber ? `Go to move #${moveNumber} - ${this.cloumnRow(history[moveNumber].location)}` : \"Go to game start!\";\r\n            return (\r\n                <li key={moveNumber}>\r\n                    <button onClick={() => this.jumpTo(moveNumber)}>{desc}</button>\r\n                </li>\r\n            )\r\n        })\r\n\r\n        let status;\r\n        if (winner) {\r\n            status = \"Winner: \" + winner;\r\n        } else {\r\n            status = 'Next player: ' + (this.state.xIsNext ? \"X\" : \"O\");\r\n        }\r\n\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board\r\n                        squares={current.squares}\r\n                        onClick={(i) => this.handleClick(i)}\r\n                    />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <div>{status}</div>\r\n                    <ol>{moves}</ol>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6]\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return squares[a];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}